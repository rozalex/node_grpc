// source: license.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.priorityconnect.license.v1.AsapiCheckRequest', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.LicenseData', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.LicenseEntry', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.LicenseEntryRequest', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.LicenseEntryResponse', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.LicenseResult', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.ModuleCheckRequest', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.ModuleCheckResult', null, global);
goog.exportSymbol('proto.priorityconnect.license.v1.ModuleCheckResult.CheckResult', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.LicenseEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.LicenseEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.LicenseEntry.displayName = 'proto.priorityconnect.license.v1.LicenseEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.LicenseData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.priorityconnect.license.v1.LicenseData.repeatedFields_, null);
};
goog.inherits(proto.priorityconnect.license.v1.LicenseData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.LicenseData.displayName = 'proto.priorityconnect.license.v1.LicenseData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.LicenseResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.LicenseResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.LicenseResult.displayName = 'proto.priorityconnect.license.v1.LicenseResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.ModuleCheckResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.ModuleCheckResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.ModuleCheckResult.displayName = 'proto.priorityconnect.license.v1.ModuleCheckResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.ModuleCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.ModuleCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.ModuleCheckRequest.displayName = 'proto.priorityconnect.license.v1.ModuleCheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.AsapiCheckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.AsapiCheckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.AsapiCheckRequest.displayName = 'proto.priorityconnect.license.v1.AsapiCheckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.LicenseEntryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.LicenseEntryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.LicenseEntryRequest.displayName = 'proto.priorityconnect.license.v1.LicenseEntryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.priorityconnect.license.v1.LicenseEntryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.priorityconnect.license.v1.LicenseEntryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.priorityconnect.license.v1.LicenseEntryResponse.displayName = 'proto.priorityconnect.license.v1.LicenseEntryResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.LicenseEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.LicenseEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.LicenseEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.LicenseEntry}
 */
proto.priorityconnect.license.v1.LicenseEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.LicenseEntry;
  return proto.priorityconnect.license.v1.LicenseEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.LicenseEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.LicenseEntry}
 */
proto.priorityconnect.license.v1.LicenseEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.LicenseEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.LicenseEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.LicenseEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.priorityconnect.license.v1.LicenseEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.LicenseEntry} returns this
 */
proto.priorityconnect.license.v1.LicenseEntry.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.priorityconnect.license.v1.LicenseEntry.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.LicenseEntry} returns this
 */
proto.priorityconnect.license.v1.LicenseEntry.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.priorityconnect.license.v1.LicenseData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.LicenseData.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.LicenseData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.LicenseData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.priorityconnect.license.v1.LicenseEntry.toObject, includeInstance),
    rawdata: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.LicenseData}
 */
proto.priorityconnect.license.v1.LicenseData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.LicenseData;
  return proto.priorityconnect.license.v1.LicenseData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.LicenseData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.LicenseData}
 */
proto.priorityconnect.license.v1.LicenseData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.priorityconnect.license.v1.LicenseEntry;
      reader.readMessage(value,proto.priorityconnect.license.v1.LicenseEntry.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.LicenseData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.LicenseData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.LicenseData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.priorityconnect.license.v1.LicenseEntry.serializeBinaryToWriter
    );
  }
  f = message.getRawdata();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated LicenseEntry data = 1;
 * @return {!Array<!proto.priorityconnect.license.v1.LicenseEntry>}
 */
proto.priorityconnect.license.v1.LicenseData.prototype.getDataList = function() {
  return /** @type{!Array<!proto.priorityconnect.license.v1.LicenseEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.priorityconnect.license.v1.LicenseEntry, 1));
};


/**
 * @param {!Array<!proto.priorityconnect.license.v1.LicenseEntry>} value
 * @return {!proto.priorityconnect.license.v1.LicenseData} returns this
*/
proto.priorityconnect.license.v1.LicenseData.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.priorityconnect.license.v1.LicenseEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.priorityconnect.license.v1.LicenseEntry}
 */
proto.priorityconnect.license.v1.LicenseData.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.priorityconnect.license.v1.LicenseEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.priorityconnect.license.v1.LicenseData} returns this
 */
proto.priorityconnect.license.v1.LicenseData.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional string rawData = 2;
 * @return {string}
 */
proto.priorityconnect.license.v1.LicenseData.prototype.getRawdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.LicenseData} returns this
 */
proto.priorityconnect.license.v1.LicenseData.prototype.setRawdata = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.LicenseResult.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.LicenseResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.LicenseResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.LicenseResult}
 */
proto.priorityconnect.license.v1.LicenseResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.LicenseResult;
  return proto.priorityconnect.license.v1.LicenseResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.LicenseResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.LicenseResult}
 */
proto.priorityconnect.license.v1.LicenseResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.LicenseResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.LicenseResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.LicenseResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool result = 1;
 * @return {boolean}
 */
proto.priorityconnect.license.v1.LicenseResult.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.priorityconnect.license.v1.LicenseResult} returns this
 */
proto.priorityconnect.license.v1.LicenseResult.prototype.setResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.ModuleCheckResult.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.ModuleCheckResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.ModuleCheckResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.ModuleCheckResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkresult: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.ModuleCheckResult}
 */
proto.priorityconnect.license.v1.ModuleCheckResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.ModuleCheckResult;
  return proto.priorityconnect.license.v1.ModuleCheckResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.ModuleCheckResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.ModuleCheckResult}
 */
proto.priorityconnect.license.v1.ModuleCheckResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.priorityconnect.license.v1.ModuleCheckResult.CheckResult} */ (reader.readEnum());
      msg.setCheckresult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.ModuleCheckResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.ModuleCheckResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.ModuleCheckResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.ModuleCheckResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckresult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.priorityconnect.license.v1.ModuleCheckResult.CheckResult = {
  VALID: 0,
  INVALID: 1,
  EXPIRED: 2
};

/**
 * optional CheckResult checkResult = 1;
 * @return {!proto.priorityconnect.license.v1.ModuleCheckResult.CheckResult}
 */
proto.priorityconnect.license.v1.ModuleCheckResult.prototype.getCheckresult = function() {
  return /** @type {!proto.priorityconnect.license.v1.ModuleCheckResult.CheckResult} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.priorityconnect.license.v1.ModuleCheckResult.CheckResult} value
 * @return {!proto.priorityconnect.license.v1.ModuleCheckResult} returns this
 */
proto.priorityconnect.license.v1.ModuleCheckResult.prototype.setCheckresult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.ModuleCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.ModuleCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    licenseid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    moduleid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.ModuleCheckRequest}
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.ModuleCheckRequest;
  return proto.priorityconnect.license.v1.ModuleCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.ModuleCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.ModuleCheckRequest}
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModuleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.ModuleCheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.ModuleCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicenseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModuleid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string licenseID = 1;
 * @return {string}
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.prototype.getLicenseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.ModuleCheckRequest} returns this
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.prototype.setLicenseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 moduleID = 2;
 * @return {number}
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.prototype.getModuleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.priorityconnect.license.v1.ModuleCheckRequest} returns this
 */
proto.priorityconnect.license.v1.ModuleCheckRequest.prototype.setModuleid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.AsapiCheckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.AsapiCheckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    licenseid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asapiname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.AsapiCheckRequest}
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.AsapiCheckRequest;
  return proto.priorityconnect.license.v1.AsapiCheckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.AsapiCheckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.AsapiCheckRequest}
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsapiname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.AsapiCheckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.AsapiCheckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicenseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsapiname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string licenseID = 1;
 * @return {string}
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.prototype.getLicenseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.AsapiCheckRequest} returns this
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.prototype.setLicenseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AsapiName = 2;
 * @return {string}
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.prototype.getAsapiname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.AsapiCheckRequest} returns this
 */
proto.priorityconnect.license.v1.AsapiCheckRequest.prototype.setAsapiname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.LicenseEntryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.LicenseEntryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    licenseid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.LicenseEntryRequest}
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.LicenseEntryRequest;
  return proto.priorityconnect.license.v1.LicenseEntryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.LicenseEntryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.LicenseEntryRequest}
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicenseid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.LicenseEntryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.LicenseEntryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLicenseid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string licenseID = 1;
 * @return {string}
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.prototype.getLicenseid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.LicenseEntryRequest} returns this
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.prototype.setLicenseid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.priorityconnect.license.v1.LicenseEntryRequest} returns this
 */
proto.priorityconnect.license.v1.LicenseEntryRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.priorityconnect.license.v1.LicenseEntryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.priorityconnect.license.v1.LicenseEntryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: (f = msg.getEntry()) && proto.priorityconnect.license.v1.LicenseEntry.toObject(includeInstance, f),
    found: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.priorityconnect.license.v1.LicenseEntryResponse}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.priorityconnect.license.v1.LicenseEntryResponse;
  return proto.priorityconnect.license.v1.LicenseEntryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.priorityconnect.license.v1.LicenseEntryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.priorityconnect.license.v1.LicenseEntryResponse}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.priorityconnect.license.v1.LicenseEntry;
      reader.readMessage(value,proto.priorityconnect.license.v1.LicenseEntry.deserializeBinaryFromReader);
      msg.setEntry(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.priorityconnect.license.v1.LicenseEntryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.priorityconnect.license.v1.LicenseEntryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.priorityconnect.license.v1.LicenseEntry.serializeBinaryToWriter
    );
  }
  f = message.getFound();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional LicenseEntry entry = 1;
 * @return {?proto.priorityconnect.license.v1.LicenseEntry}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.getEntry = function() {
  return /** @type{?proto.priorityconnect.license.v1.LicenseEntry} */ (
    jspb.Message.getWrapperField(this, proto.priorityconnect.license.v1.LicenseEntry, 1));
};


/**
 * @param {?proto.priorityconnect.license.v1.LicenseEntry|undefined} value
 * @return {!proto.priorityconnect.license.v1.LicenseEntryResponse} returns this
*/
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.setEntry = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.priorityconnect.license.v1.LicenseEntryResponse} returns this
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.clearEntry = function() {
  return this.setEntry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.hasEntry = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool found = 3;
 * @return {boolean}
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.getFound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.priorityconnect.license.v1.LicenseEntryResponse} returns this
 */
proto.priorityconnect.license.v1.LicenseEntryResponse.prototype.setFound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


goog.object.extend(exports, proto.priorityconnect.license.v1);
